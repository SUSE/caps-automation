name: "SUSE Private Registry:2.1"
on:
  workflow_dispatch:
    inputs:
      project:
        description: Source OBS Project
        required: true
        default: "Devel:CAPS:Registry:2.1"
      repository:
        description: Repository and arch on the project
        required: true
        default: charts-x86_64

env:
  REGISTRY_VERSION: "2.1"
  CHART_VERSION: "1.5"
  RC_CHANNEL: "#ecosystem-ci"
  HELM_EXPERIMENTAL_OCI: 1
  HELM_CACHE_HOME: ".cache"
  HELM_CONFIG_HOME: ".config"
  HELM_DATA_HOME: ".local/share"

jobs:
  test_suse_private_registry:
    name: "${{ github.run_number }}/${{ strategy.job-index }}: ${{ github.event.inputs.project }} (${{ matrix.test_scenario }}, ${{ matrix.action }})"
    runs-on: ecosystem-ci-runners
    container:
      image: "registry.opensuse.org/opensuse/leap:15.2"
      # ensures a dedicated empty workspace
      volumes:
        - /__w/caps-automation
    strategy:
      fail-fast: false
      matrix:
        source: ["${{ github.event.inputs.project }}"]
        action: [install, upgrade]
        test_scenario: ["no-ha", "ha+redis-operator"]
        exclude:
          - source: "SUSE:Containers:CAPS:2"
            action: upgrade
    timeout-minutes: 60
    steps:
      - name: Setup environment for ${{ github.event.inputs.project }}/${{ github.event.inputs.repository }}
        id: set_env
        run: |
          img_install_src="registry.suse.de/$(echo "${{ matrix.source }}" | tr : / | tr '[:upper:]' '[:lower:]')"
          chart_install_src="${img_install_src}/charts/harbor/harbor:${CHART_VERSION}"
          requirements_repo="http://download.suse.de/ibs/$(echo "${{ matrix.source }}" | sed 's,:,&/,g')/standard/${{ matrix.source }}.repo"
          source=${{ matrix.source }}
          case "${source}" in
            Devel:CAPS:Registry:${REGISTRY_VERSION})
              src_name="devel"
              ;;
            SUSE:SLE-15-SP2:Update:Products:CAPS-Registry:${REGISTRY_VERSION})
              src_name="suse"
              ;;
            SUSE:Containers:CAPS:2)
              src_name="release"
              requirements_repo="http://download.suse.de/ibs/SUSE:/SLE-15-SP2:/Update:/Products:/CAPS-Registry:/${REGISTRY_VERSION}/standard/SUSE:SLE-15-SP2:Update:Products:CAPS-Registry:${REGISTRY_VERSION}.repo"
              ;;
            home:*)
              src_name="$(echo "${source}" | cut -d':' -f2)"
              # The parent project repository should also be added as branched projects might not
              # include all required packages
              extra_repo="http://download.suse.de/ibs/$(echo "${source/*branches:}" | sed 's,:,&/,g')/standard/${source/*branches:}.repo"
              echo "::set-output name=extra_repo::${extra_repo}"
              ;;
            *)
              echo "::error::Unknown source ${{ matrix.source }}"
              exit 1
          esac
          if [[ "${{ matrix.action }}" == "upgrade" ]]; then
            echo "::set-output name=img_upgrade_src::${img_install_src}"
            echo "::set-output name=chart_upgrade_src::${chart_install_src}"
            img_install_src="registry.suse.de/suse/containers/caps/2"
            chart_install_src="${img_install_src}/charts/harbor/harbor:${CHART_VERSION}"
          fi
          echo "NAMESPACE=spr${REGISTRY_VERSION/./}-${src_name}-${{ github.run_number }}-${{ strategy.job-index }}" >> $GITHUB_ENV
          echo "::set-output name=img_install_src::${img_install_src}"
          echo "::set-output name=chart_install_src::${chart_install_src}"
          echo "::set-output name=src_name::${src_name}"
          echo "::set-output name=requirements_repo::${requirements_repo}"

      - name: Install requirements
        run: |
          if [[ ! -z "${{ steps.set_env.outputs.extra_repo }}" ]]; then
            zypper -n ar -Gf ${{ steps.set_env.outputs.extra_repo }}
          fi
          zypper -n ar -f http://download.suse.de/ibs/SUSE:/CA/openSUSE_Leap_15.2/SUSE:CA.repo
          zypper -n ar -Gf ${{ steps.set_env.outputs.requirements_repo }}
          zypper -n in ca-certificates-suse curl gettext gzip helm jq kubernetes-client \
            python3-robotframework tar unzip wget

      - uses: actions/checkout@v2

      - name: Fetch kubeconfig from active CaaSP cluster
        run: |
          GH_API_HEADER="authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
          git_repository="${GITHUB_REPOSITORY#*/}"
          git_repository_owner="${GITHUB_REPOSITORY%/*}"
          cluster_prefix="ecosystem"
          if [[ "${git_repository_owner}" != "SUSE" ]]; then
            cluster_prefix="${git_repository_owner}"
          fi
          active_cluster_artifacts_url=$(curl -sH "${GH_API_HEADER}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/cluster-rotate.yml/runs?status=success" \
            | jq -r ".workflow_runs[0].artifacts_url")
          kubeconfig_artifact_download_url=$(curl -sH "${GH_API_HEADER}" "${active_cluster_artifacts_url}" \
            | jq -rc ".artifacts[] | select(.name | contains(\"deployment-${cluster_prefix}\")) | .archive_download_url")
          catapult_deployment_zip="catapult_deployment.zip"
          wget --header="${GH_API_HEADER}" "${kubeconfig_artifact_download_url}" -O ${catapult_deployment_zip}
          unzip -jo ${catapult_deployment_zip} kubeconfig
          chmod 0600 kubeconfig
          echo "KUBECONFIG=$(realpath ./kubeconfig)" >> $GITHUB_ENV

      - name: Delete ${{ steps.set_env.outputs.src_name }}-${{ strategy.job-index }} deployments older than 1 hour
        run: |
          kubectl get ns -o go-template --template \
            '{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}' \
            | awk '$2 <= "'$(date -d'now-1 hours' -Ins --utc | sed 's/+0000/Z/')'" { print $1 }' \
            | grep $(printf '%s' "${NAMESPACE}" | sed 's/-[[:digit:]]\+-/.*/g') \
            | xargs --no-run-if-empty kubectl delete ns
          kubectl delete ns ${NAMESPACE} || true

      - name: Prepare values file for SUSE Private Registry
        run: |
          export INGRESS_IP="$(kubectl get svc --all-namespaces -l app=nginx-ingress | awk '/LoadBalancer/ { print $5 }')"
          echo "INGRESS_IP=${INGRESS_IP}" >> $GITHUB_ENV
          export github_token="${{ secrets.GITHUB_TOKEN }}"
          export dh_access_token="${{ secrets.DOCKERHUB_ACCESS_TOKEN }}"
          envsubst < tests/registry/${{ matrix.test_scenario }}/values.yaml > ci-values.yaml
          cat ci-values.yaml
          kubectl create ns ${NAMESPACE}

      - name: RedisFailover (install)
        if: contains(matrix.test_scenario, 'redis-operator')
        run: |
          echo -n "securepassword" > password
          kubectl -n ${NAMESPACE} create secret generic redis-auth --from-file=password
          rm password
          export img_src="${{ steps.set_env.outputs.img_install_src }}/containers"
          export img_tag="$(curl -s https://$(echo ${img_src} | sed 's#.de#&/v2#')/harbor/harbor-redis/tags/list | jq -r ".tags[]" | grep -v rev | sort -V | tail -n1)"
          envsubst < tests/registry/${{ matrix.test_scenario }}/RedisFailover.yaml > RedisFailover.yaml
          kubectl -n ${NAMESPACE} create -f RedisFailover.yaml
          sleep 60
          kubectl -n ${NAMESPACE} wait pods -l app.kubernetes.io/name=harbor-redis --for condition=Ready --timeout 10m

      - name: SUSE Private Registry (install)
        run: |
          helm chart pull ${{ steps.set_env.outputs.chart_install_src }}
          helm chart export ${{ steps.set_env.outputs.chart_install_src }}
          chart="./harbor"
          # replace images repository according to source
          sed -i 's,registry.suse.com,${{ steps.set_env.outputs.img_install_src }}/containers,g' ${chart}/values.yaml
          # create suse-ca secret for pulling test images from private-registry.prv.suse.net
          kubectl -n ${NAMESPACE} create secret generic suse-ca --from-file \
            ca.crt=$(rpm -ql ca-certificates-suse | grep crt)
          helm install ${NAMESPACE} ${chart} -n ${NAMESPACE} --values ci-values.yaml --timeout 10m --wait

      - name: SUSE Private Registry (upgrade)
        if: matrix.action == 'upgrade'
        run: |
          helm chart pull ${{ steps.set_env.outputs.chart_upgrade_src }}
          helm chart export ${{ steps.set_env.outputs.chart_upgrade_src }}
          chart="./harbor"
          # replace images repository according to source
          sed -i 's,registry.suse.com,${{ steps.set_env.outputs.img_upgrade_src }}/containers,g' ${chart}/values.yaml
          helm upgrade ${NAMESPACE} ${chart} -n ${NAMESPACE} --values ci-values.yaml --timeout 10m --wait

      - name: Run tests
        id: run_tests
        run: |
          set +e
          release_name=${NAMESPACE}
          namespace=${NAMESPACE}
          mkdir test_report
          helm test -n $namespace $release_name --timeout 30m &
          helm_test_pid=$!
          test_pods=$(helm status -n $namespace $release_name -o json | jq -r .hooks[].name)
          until kubectl exec -n $namespace $test_pods "--" pgrep "pybot|robot" &> /dev/null; do
            sleep 1
          done
          while kubectl exec -n $namespace $test_pods "--" pgrep "pybot|robot" &> /dev/null; do
            sleep 1
          done
          kubectl cp -n $namespace $test_pods:/var/lib/harbor-test/output.xml test_report/output.xml
          kubectl cp -n $namespace $test_pods:/var/lib/harbor-test/daemon-local.log test_report/daemon-local.log
          wait $helm_test_pid
          status=$?
          rebot -d test_report --log api_log.html --report api_report.html --xunit api_xunit.xml \
            test_report/output.xml
          kubectl -n $namespace logs $test_pods -c api-tests
          echo "::set-output name=has_artifacts::true"
          exit $status

      - name: Collect logs from pods
        if: always()
        run: |
          mkdir pods_logs && cd pods_logs
          for pod in $(kubectl get pods -n ${NAMESPACE} -o json | jq -r ".items[].metadata.name"); do
            mkdir $pod && pushd $pod
            kubectl -n ${NAMESPACE} get pod $pod -o json | jq ".status.containerStatuses[]" > status.info
            for container in $(kubectl -n ${NAMESPACE} get pod $pod -o json | jq -r ".status.containerStatuses[].name"); do
              kubectl -n ${NAMESPACE} logs $pod -c $container > $container.log
            done
            popd
          done

      - name: Archive logs from pods
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: "logs-${{ github.run_number }}_${{ strategy.job-index }}-${{ steps.set_env.outputs.src_name }}-${{ matrix.test_scenario }}-${{ matrix.action }}"
          path: pods_logs/*

      - name: Archive test results
        if: always() && steps.run_tests.outputs.has_artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "test_report-${{ github.run_number }}_${{ strategy.job-index }}-${{ steps.set_env.outputs.src_name }}-${{ matrix.test_scenario }}-${{ matrix.action }}"
          path: test_report/*

      - name: Process test results
        if: always() && steps.run_tests.outputs.has_artifacts
        uses: flaviodsr/junit-report-annotations-action@master
        with:
          path: test_report/api_xunit.xml

      - name: Notify
        if: always()
        uses: flaviodsr/Rocket.Chat.GitHub.Action.Notification@master
        with:
          type: ${{ job.status }}
          job_name: "*Integration Tests (${{ matrix.test_scenario }}, ${{ matrix.action }})*"
          job_ref: ${{ github.event.inputs.project }}/${{ github.event.inputs.repository }}
          deployment_url: https://${{ env.NAMESPACE }}.${{ env.INGRESS_IP }}.nip.io
          logs_url: https://logs.${{ env.INGRESS_IP }}.nip.io
          mention: here
          mention_if: failure
          channel: ${{ env.RC_CHANNEL }}
          url: ${{ secrets.ROCKETCHAT_WEBHOOK }}


  test_package_lint:
    name: Lint chart
    runs-on: ecosystem-ci-runners
    if: contains(github.event.inputs.repository, 'charts')
    container:
      image: "registry.opensuse.org/opensuse/leap:15.2"
      volumes:
        - /__w/caps-automation
    strategy:
      fail-fast: false
      matrix:
        chart: ["harbor:1.5", "redis-operator:3.1"]
    env:
      chart: "${{ matrix.chart }}"
    steps:
      - name: Install requirements
        run: |
          requirements_repo="http://download.suse.de/ibs/$(echo "${{ github.event.inputs.project }}" | sed 's,:,&/,g')/standard/${{ github.event.inputs.project }}.repo"
          if [[ "${{ github.event.inputs.project }}" == "SUSE:Containers"* ]]; then
            requirements_repo="http://download.suse.de/ibs/SUSE:/SLE-15-SP2:/Update:/Products:/CAPS-Registry:/${REGISTRY_VERSION}/standard/SUSE:SLE-15-SP2:Update:Products:CAPS-Registry:${REGISTRY_VERSION}.repo"
          elif [[ "${{ github.event.inputs.project }}" == "home:"* ]]; then
            # The parent project repository should also be added as branched projects might not
            # include all required packages
            source="${{ github.event.inputs.project }}"
            zypper -n ar -Gf http://download.suse.de/ibs/$(echo "${source/*branches:}" | sed 's,:,&/,g')/standard/${source/*branches:}.repo
          fi
          zypper -n ar -f http://download.suse.de/ibs/SUSE:/CA/openSUSE_Leap_15.2/SUSE:CA.repo
          zypper -n ar -Gf ${requirements_repo}
          zypper -n in ca-certificates-suse helm

      - name: Pull chart
        run: |
          chart_src="registry.suse.de/$(echo "${{ github.event.inputs.project }}" \
            | tr : / | tr '[:upper:]' '[:lower:]')"
          helm chart pull ${chart_src}/charts/harbor/${{ matrix.chart }}
          helm chart export ${chart_src}/charts/harbor/${{ matrix.chart }}

      - name: Lint chart
        run: helm lint $(echo ${chart//:*} | tr -d -)

      - name: Notify
        if: always()
        uses: flaviodsr/Rocket.Chat.GitHub.Action.Notification@master
        with:
          type: ${{ job.status }}
          job_name: "*Lint chart (${{ matrix.chart }})*"
          job_ref: ${{ github.event.inputs.project }}/${{ github.event.inputs.repository }}
          mention: here
          mention_if: failure
          channel: ${{ env.RC_CHANNEL }}
          url: ${{ secrets.ROCKETCHAT_WEBHOOK }}
